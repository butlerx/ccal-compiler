options {
  JAVA_UNICODE_ESCAPE = true;
  MULTI = true;
  VISITOR = true;
  NODE_DEFAULT_VOID = true;
}

PARSER_BEGIN(Ccal)

import java.util.*;

public class Ccal {
  public static HashMap<String, HashMap<String, STC>> ST = new HashMap();
  public static HashMap innerMap = new HashMap();
  public static void main(String args[]) {
    Ccal parser;
    String temp;
    STC temp2;
    if (args.length == 0) {
      System.out.println("Reading from standard input . . .");
      parser = new Ccal(System.in);
    } else if (args.length == 1) {
      try {
        parser = new Ccal(new java.io.FileInputStream(args[0]));
      } catch (java.io.FileNotFoundException e) {
        System.err.println("File " + args[0] + " not found.");
        return;
      }
    }
    else {
      System.out.println("ccal: Usage is one of:");
      System.out.println(" java ccal < inputfile");
      System.out.println("OR");
      System.out.println(" java ccal inputfile");
      return;
    }
    try {
      SimpleNode root = parser.program();
      System.out.println("Abstract Syntax Tree: ");
      root.dump(" ");
      System.out.println("Symbol Table: " );
      // go through each scope
      for(Map.Entry<String, HashMap<String, STC>> entry : ST.entrySet()){
        HashMap<String, STC> innerMap = new HashMap();
        String currentScope = entry.getKey();
        innerMap = entry.getValue();
        System.out.println("__________"+currentScope+"__________");
        // go through each item per scope
        for(Map.Entry<String, STC> innerEntry : innerMap.entrySet()){
          String type = innerEntry.getKey();
          STC tempSTC = innerEntry.getValue();
          if(tempSTC.type != null) {
            System.out.println("type = " + tempSTC.type);
          };
          if(tempSTC.value != null) {
            System.out.println("value = " + tempSTC.value);
          }
        }
      }
      System.out.println("Type Checking: ");
      TypeCheckVisitor tcv = new TypeCheckVisitor();
      root.jjtAccept(tcv, ST);
    } catch (ParseException e) {
      System.out.println("SLP Parser: Encountered errors during parse.");
      System.out.println(e.getMessage());
      System.exit(1);
    }
  }
}
PARSER_END(Ccal)

TOKEN_MGR_DECLS : {
  static int commentNesting = 0;
}

/* Ignoring spaces/tabs/newlines */
SKIP : {
  <"//" (["a"-"z"]|["A"-"Z"]|["0"-"9"]|" ")*("\n"|"\r"|"\r\n")>
  | " "
  | "\t"
  | "\n"
  | "\r"
  | "\f"
}

/* COMMENTS */
SKIP : { "/*" { commentNesting++; } : IN_COMMENT }

<IN_COMMENT> SKIP : {
  "/*" {
    commentNesting++;
  } |
  "*/" {
    commentNesting--;
    if (commentNesting == 0) {
      SwitchTo(DEFAULT);
    }
  } | <~[]>
}

/* Keywords and punctuation */
TOKEN [IGNORE_CASE]: {
  < VAR : "var" >
  | < CONST : "const" >
  | < RETURN : "return" >
  | < INTEGER : "integer" >
  | < BOOLEAN : "boolean" >
  | < VOID : "void" >
  | < MAIN : "main" >
  | < IF : "if" >
  | < ELSE : "else" >
  | < TRUE : "true" >
  | < FALSE : "false" >
  | < WHILE : "while" >
  | < SKP : "skip" >
  | < COLON : ":" >
  | < BEGIN : "begin" >
  | < END : "end" >
  | < IS : "is">
  | < NOT : "âˆ¼" >
  | < OR : "||" >
  | < AND : "&&" >
  | < EQUAL : "==" >
  | < NOT_EQUAL : "!=" >
  | < LESS_THAN : "<" >
  | < GREATER_THAN : ">" >
  | < LESS_EQUALS : "<=" >
  | < GREATER_EQUALS : ">=" >
  | < SEMIC : ";" >
  | < ASSIGN : "=" >
  | < PRINT : "print" >
  | < LBR : "(" >
  | < RBR : ")" >
  | < COMMA : "," >
  | < PLUS_SIGN : "+" >
  | < MINUS_SIGN : "-" >
  | < MULT_SIGN : "*" >
  | < DIV_SIGN : "/" >
}

/* Numbers and identifiers */
TOKEN : {
  < NUM : "0" | ("-")? ["1" - "9"] (<DIGIT>)* >
  | < #DIGIT : ["0" - "9"] >
  | < ID : (<LETTER>) (<LETTER> | <DIGIT> | "_")* >
  | < #LETTER : ["a" - "z", "A" - "Z"] >
}

/* Anything not recognised so far */
TOKEN : { < OTHER : ~[] > }

SimpleNode program() #Program : {} {
  declList("global") {
  ST.put("global", innerMap);
    HashMap tempMap = new HashMap();
    innerMap = tempMap;
  }
  funcList()
  mainProg() {
    return jjtThis;
  }
}

void declList ( String scope ) : {} {
  (( declaration(scope) <SEMIC> declList(scope)) | {} )
}

void declaration ( String scope ) : {} {
  ( varDecl(scope) | constDecl(scope) )
}

void varDecl( String scope ) #VarDecl : { String name; Token t; } {
  <VAR> name = id() <COLON> t = type() {
    if(t.toString() == "integer" && name != "") {
      innerMap.put(name , new STC(name, "int"));
    } else if(t.toString() == "boolean" && name != "") {
      innerMap.put(name , new STC(name, "bool"));
    }
  }
}

void constDecl ( String scope ) #ConstDecl : { String name; Token t; } {
  <CONST> name = id() <COLON> t = type() <ASSIGN> expression() {
    if(t.toString() == "integer" && name != "") {
      innerMap.put(name , new STC(name, "int"));
    } else if(t.toString() == "boolean" && name != "") {
      innerMap.put(name , new STC(name, "bool"));
    }
  }
}

void funcList () : {} {
  ((function() funcList()) | {})
}

void function () #Function : { String name; HashMap map; } {
  (type() | voidDec()) name = id() <LBR> param() <RBR> <IS>
    declList(name) {
      ST.put(name, innerMap);
      map = new HashMap();
      innerMap = map;
    }
  <BEGIN>
    statementBlock()
    <RETURN> <LBR> (expression() | {} ) <RBR> <SEMIC>
  <END>
}

Token type () #Type : { Token t; } {
  t = <INTEGER> {
    jjtThis.value=token;
    return t;
  } |
  t = <BOOLEAN> {
    jjtThis.value=token;
    return t;
  }
}

void param () #Param : {
  String name = new String();
  String type = new String();
  String nameTemp = new String();
  Token t = new Token();
  LinkedList<String> extras = new LinkedList<String>();
} {
  ( nameTemp = id() <COLON> t = type() ( extras = comma() | {} ) | {} ) {
    extras.add(nameTemp);
    extras.add(t.toString());
    for(int i = 0; i < extras.size(); i = i + 2) {
      name = extras.get(i);
      type = extras.get(i++);
      if(type == "integer" && name != "") {
        innerMap.put(name , new STC(name, "int"));
      } else if(type == "boolean" && name != "") {
        innerMap.put(name , new STC(name, "bool"));
      }
    }
  }
}

LinkedList<String> comma() : {
  String name= "";
  LinkedList<String> names = new LinkedList<String>();
  Token t = new Token();
  LinkedList<String> extras = new LinkedList<String>();
} {
  <COMMA> name = id() <COLON> t = type() ( extras = comma() | {} ) {
    names.add(name);
    names.add(t.toString());
    if(!extras.isEmpty()) {
      names.addAll(extras);
    }
    return names;
  }
}

String id () #Id : { Token t; } {
  t = <ID> {
    jjtThis.value = t.image;
    return t.image;
  }
}

void mainProg () #MainProg : {} {
  <MAIN>
  <BEGIN>
    declList("main") {
      ST.put("main", innerMap);
      HashMap tempMap = new HashMap();
      innerMap = tempMap;
    }
    statementBlock()
  <END>
}

void statementBlock () : {} {
  ((statement() statementBlock()) | {})
}

void statement () : {} {
  id() (<ASSIGN> expression() | <LBR> argList() <RBR>) <SEMIC>
  | <BEGIN> statementBlock() <END>
  | <IF> condition() <BEGIN> statementBlock() <END> [<ELSE> <BEGIN> statementBlock() <END>]
  | <WHILE> condition() <BEGIN> statementBlock() <END>
  | <SKP> <SEMIC>
}

void expression () : {} {
  <LBR> condition() <RBR> [ arithOp()  expression() ]
  | (id() [<LBR> argList() <RBR>] | <MINUS_SIGN>(id()) | num() | bool() ) [ arithOp() expression() ]
}

void arithOp () #ArithOp: {} {
  <PLUS_SIGN> {
    jjtThis.value = token;
  } |
  <MINUS_SIGN> {
    jjtThis.value = token;
  }
}

void condition () #Condition : {} {
  <NOT> condition()
  | expression() [compOp() expression()] [( <AND> | <OR>) condition()]
}

void compOp () #CompOp : {} {
  <EQUAL> {
    jjtThis.value = token;
  } |
  <NOT_EQUAL> {
    jjtThis.value = token;
  } |
  <LESS_THAN> {
    jjtThis.value = token;
  } |
  <GREATER_THAN> {
    jjtThis.value = token;
  } | <LESS_EQUALS> {
    jjtThis.value = token;
  } | <GREATER_EQUALS> {
    jjtThis.value = token;
  }
}

void argList () #ArgList : {} {
  ( id() ( <COMMA> id() )* | {}  )
}

void bool() #Bool : {} {
  <TRUE> {
    jjtThis.value = token;
  } | <FALSE> {
    jjtThis.value = token;
  }
}

void num() #Num : {} {
  <NUM> {
    jjtThis.value = token;
  }
}

void voidDec() #Void : {} {
  <VOID> {
    jjtThis.value = token;
  }
}
